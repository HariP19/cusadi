
# CUDA definitions for all CasADi atomic operations
#   Nearly all symbolic, scalar operations are included here.
#   Exhaustive list: https://github.com/casadi/casadi/blob/main/casadi/core/calculus.hpp

from casadi import *

OP_CUDA_DICT = {
    OP_ASSIGN:              "\n        work[idx * n_w + %d] = work[idx * n_w + %d];",
    OP_ADD:                 "\n        work[idx * n_w + %d] = work[idx * n_w + %d] + work[idx * n_w + %d];",
    OP_SUB:                 "\n        work[idx * n_w + %d] = work[idx * n_w + %d] - work[idx * n_w + %d];",
    OP_MUL:                 "\n        work[idx * n_w + %d] = work[idx * n_w + %d] * work[idx * n_w + %d];",
    OP_DIV:                 "\n        work[idx * n_w + %d] = work[idx * n_w + %d] / work[idx * n_w + %d];",
    OP_NEG:                 "\n        work[idx * n_w + %d] = -work[idx * n_w + %d];",
    OP_EXP:                 "\n        work[idx * n_w + %d] = exp(work[idx * n_w + %d]);",
    OP_LOG:                 "\n        work[idx * n_w + %d] = log(work[idx * n_w + %d]);",
    OP_POW:                 "\n        work[idx * n_w + %d] = pow(work[idx * n_w + %d], work[idx * n_w + %d]);",
    OP_CONSTPOW:            "\n        work[idx * n_w + %d] = pow(work[idx * n_w + %d], work[idx * n_w + %d]);",
    OP_SQRT:                "\n        work[idx * n_w + %d] = sqrt(work[idx * n_w + %d]);",
    OP_SQ:                  "\n        work[idx * n_w + %d] = work[idx * n_w + %d] * work[idx * n_w + %d];",
    OP_TWICE:               "\n        work[idx * n_w + %d] = 2.*(work[idx * n_w + %d]);",
    OP_SIN:                 "\n        work[idx * n_w + %d] = sin(work[idx * n_w + %d]);",
    OP_COS:                 "\n        work[idx * n_w + %d] = cos(work[idx * n_w + %d]);",
    OP_TAN:                 "\n        work[idx * n_w + %d] = tan(work[idx * n_w + %d]);",
    OP_ASIN:                "\n        work[idx * n_w + %d] = asin(work[idx * n_w + %d]);",
    OP_ACOS:                "\n        work[idx * n_w + %d] = acos(work[idx * n_w + %d]);",
    OP_ATAN:                "\n        work[idx * n_w + %d] = atan(work[idx * n_w + %d]);",
    OP_LT:                  "\n        work[idx * n_w + %d] = work[idx * n_w + %d] < work[idx * n_w + %d];",
    OP_LE:                  "\n        work[idx * n_w + %d] = work[idx * n_w + %d] <= work[idx * n_w + %d];",
    OP_EQ:                  "\n        work[idx * n_w + %d] = work[idx * n_w + %d] == work[idx * n_w + %d];",
    OP_NE:                  "\n        work[idx * n_w + %d] = work[idx * n_w + %d] != work[idx * n_w + %d];",
    OP_NOT:                 "\n        work[idx * n_w + %d] = !work[idx * n_w + %d];",
    OP_AND:                 "\n        work[idx * n_w + %d] = work[idx * n_w + %d] && work[idx * n_w + %d];",
    OP_OR:                  "\n        work[idx * n_w + %d] = work[idx * n_w + %d] || work[idx * n_w + %d];",
    OP_FLOOR:               "\n        work[idx * n_w + %d] = floor(work[idx * n_w + %d]);",
    OP_CEIL:                "\n        work[idx * n_w + %d] = ceil(work[idx * n_w + %d]);",
    OP_FMOD:                "\n        work[idx * n_w + %d] = fmod(work[idx * n_w + %d], work[idx * n_w + %d]);",
    OP_FABS:                "\n        work[idx * n_w + %d] = fabs(work[idx * n_w + %d]);",
    OP_SIGN:                "\n        work[idx * n_w + %d] = sign(work[idx * n_w + %d]);",
    OP_COPYSIGN:            "\n        work[idx * n_w + %d] = copysign(work[idx * n_w + %d]);",
    OP_IF_ELSE_ZERO:        "\n        work[idx * n_w + %d] = (work[idx * n_w + %d] == 0) ? 0 : work[idx * n_w + %d];",
    OP_ERF:                 "\n        work[idx * n_w + %d] = erf(work[idx * n_w + %d]);",
    OP_FMIN:                "\n        work[idx * n_w + %d] = fmin(work[idx * n_w + %d]);",
    OP_FMAX:                "\n        work[idx * n_w + %d] = fmax(work[idx * n_w + %d]);",
    OP_INV:                 "\n        work[idx * n_w + %d] = 1./(work[idx * n_w + %d]);",
    OP_SINH:                "\n        work[idx * n_w + %d] = sinh(work[idx * n_w + %d]);",
    OP_COSH:                "\n        work[idx * n_w + %d] = cosh(work[idx * n_w + %d]);",
    OP_TANH:                "\n        work[idx * n_w + %d] = tanh(work[idx * n_w + %d]);",
    OP_ASINH:               "\n        work[idx * n_w + %d] = asinh(work[idx * n_w + %d]);",
    OP_ACOSH:               "\n        work[idx * n_w + %d] = acosh(work[idx * n_w + %d]);",
    OP_ATANH:               "\n        work[idx * n_w + %d] = atanh(work[idx * n_w + %d]);",
    OP_ATAN2:               "\n        work[idx * n_w + %d] = atan2(work[idx * n_w + %d], work[idx * n_w + %d]);",
    OP_CONST:               "\n        work[idx * n_w + %d] = %.16f;",
    OP_INPUT:               "\n        work[idx * n_w + %d] = inputs[%d][idx * nnz_in[%d] + %d];",
    OP_OUTPUT:              "\n        outputs[%d][idx * nnz_out[%d] + %d] = work[idx * n_w + %d];",
}
